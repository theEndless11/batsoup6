{"version":3,"sources":["messages.js"],"names":["connectToDatabase","require","Message","module","exports","req","res","method","find","sort","timestamp","messages","status","json","console","error","details","message","body","username","mediaUrl","newMessage","save","deleteMany"],"mappings":";;AAAA,IAAMA,iBAAiB,GAAGC,OAAO,CAAC,OAAD,CAAjC,C,CAA4C;;;AAC5C,IAAMC,OAAO,GAAGD,OAAO,CAAC,mBAAD,CAAvB,C,CAA8C;;;AAE9CE,MAAM,CAACC,OAAP,GAAiB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAETN,iBAAiB,EAFR;;AAAA;AAAA,gBAKXK,GAAG,CAACE,MAAJ,KAAe,KALJ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,0CAOYL,OAAO,CAACM,IAAR,GAAeC,IAAf,CAAoB;AAAEC,YAAAA,SAAS,EAAE;AAAb,WAApB,CAPZ;;AAAA;AAOLC,UAAAA,QAPK;AAQXL,UAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,QAArB;AARW;AAAA;;AAAA;AAAA;AAAA;AAUXG,UAAAA,OAAO,CAACC,KAAR,CAAc,0BAAd;AACAT,UAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEE,YAAAA,KAAK,EAAE,yBAAT;AAAoCC,YAAAA,OAAO,EAAE,YAAMC;AAAnD,WAArB;;AAXW;AAAA;AAAA;;AAAA;AAAA,gBAgBNZ,GAAG,CAACE,MAAJ,KAAe,MAhBT;AAAA;AAAA;AAAA;;AAAA;AAAA,sBAkB6BF,GAAG,CAACa,IAlBjC,EAkBHC,QAlBG,aAkBHA,QAlBG,EAkBOF,OAlBP,aAkBOA,OAlBP,EAkBgBG,QAlBhB,aAkBgBA,QAlBhB;AAmBLC,UAAAA,UAnBK,GAmBQ,IAAInB,OAAJ,CAAY;AAAEiB,YAAAA,QAAQ,EAARA,QAAF;AAAYF,YAAAA,OAAO,EAAPA,OAAZ;AAAqBG,YAAAA,QAAQ,EAARA;AAArB,WAAZ,CAnBR;AAAA;AAAA,0CAoBLC,UAAU,CAACC,IAAX,EApBK;;AAAA;AAqBXhB,UAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBQ,UAArB;AArBW;AAAA;;AAAA;AAAA;AAAA;AAuBXP,UAAAA,OAAO,CAACC,KAAR,CAAc,uBAAd;AACAT,UAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEE,YAAAA,KAAK,EAAE,sBAAT;AAAiCC,YAAAA,OAAO,EAAE,YAAMC;AAAhD,WAArB;;AAxBW;AAAA;AAAA;;AAAA;AAAA,gBA6BNZ,GAAG,CAACE,MAAJ,KAAe,QA7BT;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,0CAgCLL,OAAO,CAACqB,UAAR,CAAmB,EAAnB,CAhCK;;AAAA;AAiCXjB,UAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEI,YAAAA,OAAO,EAAE;AAAX,WAArB;AAjCW;AAAA;;AAAA;AAAA;AAAA;AAmCXH,UAAAA,OAAO,CAACC,KAAR,CAAc,0BAAd;AACAT,UAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEE,YAAAA,KAAK,EAAE,yBAAT;AAAoCC,YAAAA,OAAO,EAAE,YAAMC;AAAnD,WAArB;;AApCW;AAAA;AAAA;;AAAA;AA0CbX,UAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEE,YAAAA,KAAK,EAAE;AAAT,WAArB;;AA1Ca;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB","sourcesContent":["const connectToDatabase = require('../db'); // Correct path to db.js\r\nconst Message = require('../models/Message'); // Correct path to Message.js\r\n\r\nmodule.exports = async (req, res) => {\r\n  // Ensure the database connection is established\r\n  await connectToDatabase();\r\n\r\n  // Handle GET request to fetch all messages\r\n  if (req.method === 'GET') {\r\n    try {\r\n      const messages = await Message.find().sort({ timestamp: 1 });\r\n      res.status(200).json(messages);\r\n    } catch (error) {\r\n      console.error('Error fetching messages:', error);\r\n      res.status(500).json({ error: 'Error fetching messages', details: error.message });\r\n    }\r\n  }\r\n  \r\n  // Handle POST request to save a new message\r\n  else if (req.method === 'POST') {\r\n    try {\r\n      const { username, message, mediaUrl } = req.body;\r\n      const newMessage = new Message({ username, message, mediaUrl });\r\n      await newMessage.save();\r\n      res.status(201).json(newMessage);\r\n    } catch (error) {\r\n      console.error('Error saving message:', error);\r\n      res.status(500).json({ error: 'Error saving message', details: error.message });\r\n    }\r\n  }\r\n  \r\n  // Handle DELETE request to clear all messages from the database\r\n  else if (req.method === 'DELETE') {\r\n    try {\r\n      // Delete all messages from MongoDB\r\n      await Message.deleteMany({});\r\n      res.status(200).json({ message: 'All messages cleared' });\r\n    } catch (error) {\r\n      console.error('Error deleting messages:', error);\r\n      res.status(500).json({ error: 'Error deleting messages', details: error.message });\r\n    }\r\n  }\r\n  \r\n  // Handle unsupported HTTP methods\r\n  else {\r\n    res.status(405).json({ error: 'Method Not Allowed' });\r\n  }\r\n};\r\n"],"file":"messages.dev.js"}