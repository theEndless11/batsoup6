{"version":3,"sources":["messages.js"],"names":["connectToDatabase","require","Message","module","exports","req","res","messages","_req$body","username","message","mediaUrl","newMessage","regeneratorRuntime","async","_context","prev","next","awrap","find","sort","timestamp","sent","status","json","t0","console","error","details","method","body","save","t1","deleteMany","t2","stop"],"mappings":"aAAA,IAAMA,kBAAoBC,QAAQ,SAC5BC,QAAUD,QAAQ,qBAExBE,OAAOC,QAAU,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,MAFXhB,qBAEW,KAAA,EAAA,GAAA,QAAXG,EAACD,OAAU,OAAAW,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAOYhB,QAAQiB,OAAOC,KAAK,CAAEC,UAAW,KAP7CN,EAAAE,KAAA,GAAA,MAAA,KAAA,EAOLV,EAPKQ,EAAAO,KAAAhB,EAAAiB,OAAA,KAAAC,KAAAjB,GAAAQ,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAU,GAAAV,EAAA,MAAA,GAAAW,QAAAC,MAAA,2BAAAZ,EAAAU,IAAAnB,EAAAiB,OAAA,KAAAC,KAAA,CAAAG,MAAA,0BAAAC,QAAAb,EAAAU,GAAAf,UAAA,KAAA,GAAAK,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,GAKX,SALWZ,EAAAwB,OAAA,OAAAd,EAAAC,KAAA,GAAAR,EAAAH,EAAAyB,KAAArB,EAAAD,EAAAC,SAAAC,EAAAF,EAAAE,QAAAC,EAAAH,EAAAG,SAAAC,EAAA,IAAAV,QAAA,CAAAO,SAAAA,EAAAC,QAAAA,EAAAC,SAAAA,IAAAI,EAAAE,KAAA,GAAAJ,mBAAAK,MAoBLN,EAAWmB,QApBNhB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAX,EAAAiB,OAAA,KAAAC,KAAAZ,GAAAG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAiB,GAAAjB,EAAA,MAAA,IAAAW,QAAAC,MAAA,wBAAAZ,EAAAiB,IAOkCX,EAAAA,OAAAA,KAASG,KAAE,CAAAG,MAAA,uBAAAC,QAAAb,EAAAiB,GAAAtB,UAP7C,KAAA,GAAAK,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,GAQKO,WAAhBlB,EAAIiB,OARO,OAAAR,EAAAC,KAAA,GAAAD,EAAAE,KAAA,GAAAJ,mBAAAK,MAgCLhB,QAAQ+B,WAAW,KAhCdlB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAX,EAAAiB,OAAA,KAAAC,KAAA,CAAAd,QAAA,yBAAAK,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAmB,GAAAnB,EAAA,MAAA,IAAAW,QAAAC,MAAA,2BAAAZ,EAAAmB,IAUXR,EAAAA,OAAO,KAACC,KAAM,CAAAA,MAAA,0BAAdC,QAAAb,EAAAmB,GAAAxB,UAVW,KAAA,GAAAK,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAX,EAAAiB,OAAA,KAAAC,KAAA,CAAAG,MAAA,uBAAA,KAAA,GAAA,IAAA,MAAA,OAAAZ,EAAAoB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,IAAA,CAAA,GAAA,IAAA,CAAA,GAAA","file":"messages.min.js","sourcesContent":["const connectToDatabase = require('../db'); // Correct path to db.js\r\nconst Message = require('../models/Message'); // Correct path to Message.js\r\n\r\nmodule.exports = async (req, res) => {\r\n  // Ensure the database connection is established\r\n  await connectToDatabase();\r\n\r\n  // Handle GET request to fetch all messages\r\n  if (req.method === 'GET') {\r\n    try {\r\n      const messages = await Message.find().sort({ timestamp: 1 });\r\n      res.status(200).json(messages);\r\n    } catch (error) {\r\n      console.error('Error fetching messages:', error);\r\n      res.status(500).json({ error: 'Error fetching messages', details: error.message });\r\n    }\r\n  }\r\n  \r\n  // Handle POST request to save a new message\r\n  else if (req.method === 'POST') {\r\n    try {\r\n      const { username, message, mediaUrl } = req.body;\r\n      const newMessage = new Message({ username, message, mediaUrl });\r\n      await newMessage.save();\r\n      res.status(201).json(newMessage);\r\n    } catch (error) {\r\n      console.error('Error saving message:', error);\r\n      res.status(500).json({ error: 'Error saving message', details: error.message });\r\n    }\r\n  }\r\n  \r\n  // Handle DELETE request to clear all messages from the database\r\n  else if (req.method === 'DELETE') {\r\n    try {\r\n      // Delete all messages from MongoDB\r\n      await Message.deleteMany({});\r\n      res.status(200).json({ message: 'All messages cleared' });\r\n    } catch (error) {\r\n      console.error('Error deleting messages:', error);\r\n      res.status(500).json({ error: 'Error deleting messages', details: error.message });\r\n    }\r\n  }\r\n  \r\n  // Handle unsupported HTTP methods\r\n  else {\r\n    res.status(405).json({ error: 'Method Not Allowed' });\r\n  }\r\n};\r\n"]}